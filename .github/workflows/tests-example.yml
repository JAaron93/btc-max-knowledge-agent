# Example GitHub Actions workflow for proper test execution
# This shows how to run tests without path manipulation in CI/CD

name: Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt', '**/setup.cfg', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install the project in development mode - this eliminates path hacks
          pip install -e ".[dev]"
      
      - name: Run tests with proper imports
        run: |
          # Tests can now use standard absolute imports
          python -m pytest tests/ -v
      
      - name: Run linting
        if: ${{ matrix.python-version == '3.11' }}
        run: |
          # Linting also works properly with installable package
          # Only run linting once (on Python 3.11) to avoid redundant CI time usage
          pylint src/
          black --check src/ tests/
          isort --check-only src/ tests/
from __future__ import annotations
from typing import Protocol
from .models import DetectionResult

class ISecurityValidator(Protocol):
    def validate(self, text: str) -> DetectionResult: ...

class ISecurityMonitor(Protocol):
    def record(self, result: DetectionResult) -> None: ...


class IConfigurationValidator(Protocol):
    def validate(self, config: dict) -> bool: ...


class IRateLimiter(Protocol):
    def allow(self, key: str) -> bool: ...


class ISecurityLogger(Protocol):
    def info(self, msg: str) -> None: ...
    def warning(self, msg: str) -> None: ...
    def error(self, msg: str) -> None: ...

class IPromptInjectionDetector(Protocol):
    def detect(self, text: str) -> Any: ...

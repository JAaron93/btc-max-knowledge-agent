#!/usr/bin/env python3
"""
Generate Admin Password Hash
Utility to generate secure password hashes for admin authentication
"""

import secrets
import hashlib
import getpass
import sys


def hash_password(password: str) -> str:
    """Hash password using PBKDF2 with salt"""
    salt = secrets.token_bytes(32)
    pwdhash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 100000)
    return salt.hex() + ':' + pwdhash.hex()


def generate_secret_key() -> str:
    """Generate a secure secret key"""
    return secrets.token_hex(32)


def main():
    """Main function to generate admin credentials"""
    print("🔐 Bitcoin Knowledge Assistant - Admin Credential Generator")
    print("=" * 60)
    
    print("\n1. Admin Username:")
    username = input("Enter admin username (default: admin): ").strip()
    if not username:
        username = "admin"
    
    print("\n2. Admin Password:")
    while True:
        password = getpass.getpass("Enter admin password: ")
        if len(password) < 8:
            print("❌ Password must be at least 8 characters long")
            continue
        
        confirm_password = getpass.getpass("Confirm admin password: ")
        if password != confirm_password:
            print("❌ Passwords do not match")
            continue
        
        break
    
    print("\n3. Generating secure credentials...")
    
    # Generate password hash
    password_hash = hash_password(password)
    
    # Generate secret key
    secret_key = generate_secret_key()
    
    print("\n✅ Credentials generated successfully!")
    print("\n" + "=" * 60)
    print("Add these lines to your .env file:")
    print("=" * 60)
    print(f"ADMIN_USERNAME={username}")
    print(f"ADMIN_PASSWORD_HASH={password_hash}")
    print(f"ADMIN_SECRET_KEY={secret_key}")
    print("=" * 60)
    
    print("\n📋 Optional configuration:")
    print("ADMIN_TOKEN_EXPIRY_HOURS=24")
    print("ADMIN_SESSION_TIMEOUT_MINUTES=30")
    
    print("\n🔒 Security Notes:")
    print("• Keep these credentials secure and never commit them to version control")
    print("• The password hash uses PBKDF2 with 100,000 iterations")
    print("• The secret key is 64 characters of cryptographically secure random data")
    print("• Admin tokens expire after 24 hours by default")
    print("• Sessions timeout after 30 minutes of inactivity")
    
    print("\n🚀 Next Steps:")
    print("1. Add the environment variables to your .env file")
    print("2. Restart the application")
    print("3. Test admin login with: POST /admin/login")
    
    # Offer to save to file
    save_to_file = input("\n💾 Save credentials to .env.admin file? (y/N): ").strip().lower()
    if save_to_file in ['y', 'yes']:
        try:
            with open('.env.admin', 'w') as f:
                f.write("# Admin Authentication Configuration\n")
                f.write("# Generated by generate_admin_hash.py\n")
                f.write(f"ADMIN_USERNAME={username}\n")
                f.write(f"ADMIN_PASSWORD_HASH={password_hash}\n")
                f.write(f"ADMIN_SECRET_KEY={secret_key}\n")
                f.write("\n# Optional configuration\n")
                f.write("ADMIN_TOKEN_EXPIRY_HOURS=24\n")
                f.write("ADMIN_SESSION_TIMEOUT_MINUTES=30\n")
            
            print("✅ Credentials saved to .env.admin")
            print("⚠️  Remember to add .env.admin to your .gitignore file!")
        except Exception as e:
            print(f"❌ Failed to save credentials: {e}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n❌ Operation cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Error: {e}")
        sys.exit(1)